setwd("C:/Users/XZM/Desktop/study/Rfile/Coldseep2021/18S/2nd/");
library(picante);
library(vegan);
library(dplyr);
library(ggplot2);
#library(stringr)

ASV18s_filter = read.table("coldseep_18sASV_nometaembrycharophyta.txt",header=T,check.names = F); 
dim(ASV18s_filter);
ASV18s <- t(ASV18s_filter) # sample name as rows

tree.18s = read.tree("rooted-tree-filtered.nwk") # tree file generated by QIIME2ï¼Œfor phylogenetic distance
metadata = read.table("sample-metadata.txt",header = T,check.names = F); # metadata including location and environmental parameters
tax = read.csv("taxonomy.csv",row.names = 1) # taxonmy information of each ASV

gsub("cm","",metadata$Depth) -> metadata$Depth
identical(rownames(metadata),rownames(ASV18s));


### use depth < 25cm, as control group (non-seep region, ROV5) only as deep as 25 cm 
# re-name ASV and metadata

ASV18s = ASV18s[which(metadata$Depth <= 25 | metadata$Depth == 5),]
rownames(ASV18s)
metadata = metadata[which(metadata$Depth <= 25 | metadata$Depth == 5),]#also trim metadata
rownames(metadata)
identical(rownames(ASV18s),rownames(metadata))


### remove taxon = "^D_0__Eukaryota$", unclassified
tax_filtered = tax[match(colnames(ASV18s), rownames(tax)),]
ASV18s[,-grep("^D_0__Eukaryota$",tax_filtered$Taxon)] -> ASV18s

min(rowSums(ASV18s)) -> dep ## rarefy samples to same sequencing depth
ASV18s = rrarefy(ASV18s,dep)

#group by ROV, use ROVs as habitats
ASV18s_ROV1 = ASV18s[grep("ROV1", rownames(ASV18s)),] #anosim shows sig dif between ROV1 and 2
ASV18s_ROV2 = ASV18s[grep("ROV2", rownames(ASV18s)),]
ASV18s_ROV3 = ASV18s[grep("ROV3", rownames(ASV18s)),]
ASV18s_ROV4 = ASV18s[grep("ROV4", rownames(ASV18s)),]
ASV18s_ROV5 = ASV18s[grep("ROV5", rownames(ASV18s)),]
ASV18s_ROV45 = rbind(ASV18s_ROV4,ASV18s_ROV5) ## ROV4 and ROV5 are both non-seep region, merged.
ASV18s_ROV135 = rbind(ASV18s_ROV1, ASV18s_ROV3, ASV18s_ROV4,ASV18s_ROV5)
ASV18s_ROV13 = rbind(ASV18s_ROV1, ASV18s_ROV3)
ASV18s_ROV15 = rbind(ASV18s_ROV1, ASV18s_ROV45)
ASV18s_ROV35 = rbind(ASV18s_ROV3, ASV18s_ROV45)

ASV18s_ROV1 = rrarefy(ASV18s_ROV1, min(rowSums(ASV18s_ROV1)))
ASV18s_ROV2 = rrarefy(ASV18s_ROV2, min(rowSums(ASV18s_ROV2)))
ASV18s_ROV3 = rrarefy(ASV18s_ROV3, min(rowSums(ASV18s_ROV3)))
ASV18s_ROV4 = rrarefy(ASV18s_ROV4, min(rowSums(ASV18s_ROV4)))
ASV18s_ROV5 = rrarefy(ASV18s_ROV5, min(rowSums(ASV18s_ROV5)))
ASV18s_ROV45 = rrarefy(ASV18s_ROV45, min(rowSums(ASV18s_ROV45)))
ASV18s_ROV135 = rrarefy(ASV18s_ROV135, min(rowSums(ASV18s_ROV135)))
ASV18s_ROV13 = rrarefy(ASV18s_ROV13, min(rowSums(ASV18s_ROV13)))
ASV18s_ROV15 = rrarefy(ASV18s_ROV15, min(rowSums(ASV18s_ROV15)))
ASV18s_ROV35 = rrarefy(ASV18s_ROV35, min(rowSums(ASV18s_ROV35)))

ASV18s_ROV1 = ASV18s_ROV1[,which(colSums(ASV18s_ROV1)>0)]
ASV18s_ROV2 = ASV18s_ROV2[,which(colSums(ASV18s_ROV2)>0)]
ASV18s_ROV3 = ASV18s_ROV3[,which(colSums(ASV18s_ROV3)>0)]
ASV18s_ROV4 = ASV18s_ROV4[,which(colSums(ASV18s_ROV4)>0)]
ASV18s_ROV5 = ASV18s_ROV5[,which(colSums(ASV18s_ROV5)>0)]
ASV18s_ROV45 = ASV18s_ROV45[,which(colSums(ASV18s_ROV45)>0)]
ASV18s_ROV135 = ASV18s_ROV135[,which(colSums(ASV18s_ROV135)>0)]
ASV18s_ROV13 = ASV18s_ROV13[,which(colSums(ASV18s_ROV13)>0)]
ASV18s_ROV15 = ASV18s_ROV15[,which(colSums(ASV18s_ROV15)>0)]
ASV18s_ROV35 = ASV18s_ROV35[,which(colSums(ASV18s_ROV35)>0)]
